# ------------------------------------------------------------------------------
import os
import subprocess
import tempfile

from Energy import save_PDB_to_file
from GeometryOptimization import minimize
from Molecule import Molecule
# ------------------------------------------------------------------------------

PEPDICE = os.environ.get('PEPDICE')
PEPDICE_EXAMPLES = os.path.join(PEPDICE, 'Examples')
PEPDICE_PARAMETER = os.path.join(PEPDICE, 'Parameters')

PEPDICE_PDBS = os.path.join(PEPDICE, 'PDBs')
PEPDICE_OUTPUTS = os.path.join(PEPDICE, 'outputs')


os.path.join(PEPDICE_PDBS,)

# ------------------------------------------------------------------------------


def pdb_extract_chain(pdbin, pdbout, chain='A', model=1):
    """ Function doc """

    pdbtext = open(pdbin, 'r')
    text = ''
    for line in pdbtext:
        line2 = line.split()
        if len(line2) > 0:
            if len(line2) > 10 and line2[0] == 'ATOM':
                if chain in line2:
                    # ignora as linhas com H no final
                    if line2[-1] != 'H':
                        text += line + '\n'

            if line2[0] == 'MODEL':
                if int(line2[1]) != 1:
                    break

        # For PDBs without chain or element info as the ones generated by
        # 3drobot
        if 0 < len(line2) <= 10 and line2[0] == 'ATOM' and (
                not line2[2].startswith('H')):
            text += line + '\n'

    pdbout = open(pdbout, 'w')
    pdbout.write(text)
    pdbout.close()


def get_sequence_from_pdb(pdbin, seq_out=None):
    """ Function doc """
    pdb = pdbin

    pdbtext = open(pdb, 'r')
    sequence = []
    sequence_code = ''
    previous_index = None

    aa_dic = {
        'ALA': 'A',
        'ARG': 'R',
        'ASN': 'N',
        'ASP': 'D',
        'CYS': 'C',
        'GLU': 'E',
        'GLN': 'Q',
        'GLY': 'G',
        'HIS': 'H',
        'ILE': 'I',
        'LEU': 'L',
        'LYS': 'K',
        'MET': 'M',
        'PHE': 'F',
        'PRO': 'P',
        'SER': 'S',
        'THR': 'T',
        'TRP': 'W',
        'TYR': 'Y',
        'VAL': 'V',
    }

    for line in pdbtext:
        line2 = line.split()
        if len(line2) > 0:
            if line2[0] == 'ATOM':
                try:
                    index = int(line2[5])
                except ValueError:
                    # Missing chain for decoys
                    index = int(line2[4])

                if index != previous_index:
                    sequence.append(line2[3])
                    previous_index = index
                    sequence_code += aa_dic[line2[3]]

            if line2[0] == 'TER' or line2[0] == 'END':
                break

    if seq_out is not None:
        pdbcode = pdbin.split('.')
        pdbcode = pdbcode[0]
        pdbcode = pdbcode + '  ' + sequence_code
        fileout = open(seq_out, 'w')
        fileout.write(pdbcode)

    return sequence_code


def phenix_geometry_minimization(pdbin, geo=False, geofile=None):
    """ Function doc """

    if geo:
        subprocess.check_call(['phenix.geometry_minimization', pdbin, geofile])
    else:
        subprocess.check_call(['phenix.geometry_minimization', pdbin])

    return pdbin+'_minimized.pdb'


def build_AMBER_system_from_PDB(pdbin=None,
                                basename=None,
                                force_field='ff03ua',
                                overwrite=True,
                                leaprc_filename='leaprc'
                                ):
    """
    Function doc
    source leaprc.ff03ua
    foo = sequence { ACE ALA NME }
    saveamberparm foo foo.top foo.crd
    """

    text = """
        addpath {path}
        source leaprc.{force_field}
        foo = loadpdb {pdbin}
        saveamberparm foo {basename}.top {basename}.crd
        savepdb foo {basename}.pdb
        quit
    """.format(
        path=os.path.join(PEPDICE, 'Parameters/amber/labio.amber'),
        force_field=force_field, pdbin=pdbin, basename=basename,
    )

    if leaprc_filename is not None:
        leaprc_exists = os.path.exists(leaprc_filename)
        if not leaprc_exists or (leaprc_exists and overwrite):
            with open('leaprc', 'w') as leaprc:
                leaprc.write(text)
            subprocess.check_call(['tleap', '-f', leaprc_filename])
    else:
        with tempfile.NamedTemporaryFile() as leaprc:
            leaprc.write(text)
            leaprc.flush()
            os.fsync(leaprc)  # flush() followed by os.fsync() to write to disk
            subprocess.check_call(['tleap', '-f', leaprc.name])


def amber12_to_amber11_topology_converter(filein, fileout):
    filein = open(filein, 'r')
    text = []
    print_line = True

    for line in filein:
        line2 = line.split()
        try:
            if line2[0] == '%FLAG':
                if line2[1] == 'ATOMIC_NUMBER':
                    print 'excluding flag:', line
                    print_line = False

                elif line2[1] == 'SCEE_SCALE_FACTOR':
                    print 'excluding flag:', line
                    print_line = False

                elif line2[1] == "SCNB_SCALE_FACTOR":
                    print 'excluding flag:', line
                    print_line = False

                elif line2[1] == 'IPOL':
                    print 'excluding flag:', line
                    print_line = False

                else:
                    print_line = True
        except:
            if print_line:
                text.append(line)

    fileout = open(fileout, 'w')
    fileout.writelines(text)
    fileout.close()


def amber_topology_angle_force_change(filein=None, fileout=None, force='E+04'):
    """ Function doc """
    filein = open(filein, 'r')
    filein2 = filein.readlines()

    for line in filein2:
        if '%FLAG ANGLE_FORCE_CONSTANT' in line:
            inicio = filein2.index(line)

        if '%FLAG ANGLE_EQUIL_VALUE' in line:
            final = filein2.index(line)

    for line in range(inicio, final):
        print filein2[line]

        if 'E+01' in filein2[line]:
            filein2[line] = filein2[line].replace('E+01', force)
            print filein2[line]

    fileout = open(fileout, 'w')
    fileout.writelines(filein2)
    fileout.close()


def wget_pdb(pdbcode, filesInFolder=None):
    """ Function doc """

    if filesInFolder is None:
        filesInFolder = os.listdir('.')

    if pdbcode+'.pdb' not in filesInFolder:
        os.system('wget https://files.rcsb.org/download/'+pdbcode+'.pdb')


PDBcodes = {
     '1GAB': ['alpha'     ],
    #'1BX4': ['alpha_beta'],
    # '1UAO': ['beta'      ],
    # '1LE1': ['beta'      ],
    # '1CSK': ['beta'      ],
    # '2GB1': ['beta'      ],
    # '1E0Q': ['beta'      ],
    # '1L2Y': ['alpha'     ],
    # '2JOF': ['alpha'     ],
    # '1RIJ': ['alpha'     ],
    # '1E0N': ['beta'      ],
    # '1E0L': ['beta'      ],
    # '1I6C': ['beta'      ],
    # '1FME': ['alpha_beta'],
    # '1PSV': ['alpha_beta'],
    # '1UBQ': ['alpha_beta'],
    # '1WY3': ['alpha'     ],
    # '1YRF': ['alpha'     ],
    # '2F4K': ['alpha'     ],
    # '1VII': ['alpha'     ],
    # '1EI0': ['alpha'     ],
    # '1ERY': ['alpha'     ],
    # '2HBA': ['alpha_beta'],
    # '2HEP': ['alpha'     ],
    # '1RES': ['alpha'     ],
    # '1BDD': ['alpha'     ],
    # '1E0G': ['alpha_beta'],
    # '1BDD': ['alpha'     ],
    # '1DV0': ['alpha'     ],
    # '1PRB': ['alpha'     ],
    # '2WXC': ['alpha'     ],
}


if __name__ == '__main__':

    folder = os.getcwd()
    fold_classes = ['alpha', 'beta', 'alpha_beta']

    for fold_class in fold_classes:
        if not os.path.exists(fold_class):
            os.mkdir(fold_class)

    logfile = open('logfile', 'w')
    logtext = []
    for code in PDBcodes:
        print code
        print PDBcodes[code][0]
        # ----------------------------------------------------------------------
        path = os.path.join(folder, PDBcodes[code][0])
        os.chdir(path)

        if not os.path.exists(code):
            os.mkdir(code)

        os.chdir(os.path.join(path, code))
        # ----------------------------------------------------------------------

        try:
            wget_pdb(pdbcode=code, filesInFolder=None)

            pdb_extract_chain(pdbin=code + '.pdb',
                              pdbout=code + '_A.pdb',
                              chain='A')

            get_sequence_from_pdb(
                pdbin=code + '_A.pdb', seq_out=code + '_A.seq')
            # ------------------------------------------------------------------
            logtext.append(code + ' wget_pdb......Ok\n')
        except Exception as error:
            print 'failed wget pdb'
            print error
            logtext.append(code + ' wget_pdb......failed\n')

        try:
            # ------------------------------------------------------------------
            build_AMBER_system_from_PDB(
                pdbin=code+'_A.pdb',
                basename=code+'_A_AMBER',
                force_field='ff03ua.labio',
                overwrite=True
            )
            system = Molecule()
            system.load_PDB_to_system(filename=code + '_A_AMBER.pdb')
            system.import_AMBER_parameters(
                top=code + '_A_AMBER.top',
                torsions=os.path.join(
                    PEPDICE_PARAMETER, 'amber/AMBER_rotamers.dat'),
            )
            save_PDB_to_file(system, code+'_A.pdb')
            logtext.append(code + ' tleap......Ok\n')

        except:
            print 'failed wget pdb'
            logtext.append(code + ' tleap......failed\n')

        try:
            minimize(
                molecule=system,
                imin=1,
                maxcyc=1000,
                ncyc=100,
                cut=10,
                rgbmax=999,
                igb=1,
                ntb=0,
                ntpr=100,
                ntr=0,
            )
            save_PDB_to_file(system, code+'_A_AMBER_minimized.pdb')
            logtext.append(code+' amber opt......ok\n')

            # ------------------------------------------------------------------
        except Exception as error:
            print 'failed:', code, 'opt amber'
            print error
            logtext.append(code+' amber opt......failed\n')

    logfile.writelines(logtext)
